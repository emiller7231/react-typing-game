{"version":3,"sources":["index.js"],"names":["Letter","props","className","status","value","Sentence","letter","index","this","current","inputLetters","Array","from","input","map","isRigthOrWrong","letters","slice","length","React","Component","WordsPerMinute","wordsPerMinute","Game","state","isLoaded","error","startedTime","Date","currentTime","options","words","handleChange","bind","fetch","then","res","text","result","optionsArray","split","setState","getRandomInt","setInterval","tick","event","target","minutes","getTime","Math","floor","type","onChange","min","max","ceil","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f45840e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Letter(props) {\r\n    return (\r\n        <span className={props.status}>{props.value}</span>\r\n    );\r\n}\r\n\r\nclass Sentence extends React.Component {\r\n    isRigthOrWrong(letter, index) {\r\n        return letter === this.props.current[index] ? \"right\" : \"wrong\";\r\n    }\r\n\r\n    render() {\r\n        const inputLetters = Array.from(this.props.input)\r\n            .map((letter, index) => {\r\n                return (\r\n                    <Letter key={index} status={this.isRigthOrWrong(letter, index)} value = {letter} />\r\n                );\r\n            });\r\n        const letters = Array.from(this.props.current)\r\n            .slice(this.props.input.length)\r\n            .map((letter, index) => {\r\n                return (\r\n                    <Letter key={index} status=\"nothing\" value = {letter} />\r\n                );\r\n            });\r\n\r\n        return (\r\n            <div className=\"title\">\r\n                {inputLetters}\r\n                {letters}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction WordsPerMinute(props) {\r\n    return (\r\n        <p>Words per minute {props.wordsPerMinute}</p>\r\n    );\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            error: \"\",\r\n            startedTime: new Date(),\r\n            currentTime: new Date(),\r\n            options: [],\r\n            current: \"\",\r\n            input: \"\",\r\n            words: 0,\r\n            wordsPerMinute: 0\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"/react-typing-game/sentences.txt\")\r\n            .then(res => res.text())\r\n            .then(\r\n                (result) => {\r\n                    let optionsArray = result.split(/\\r?\\n/);\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        startedTime: new Date(),\r\n                        currentTime: new Date(),\r\n                        options: optionsArray,\r\n                        current: optionsArray[getRandomInt(0, optionsArray.length)]\r\n                    });\r\n                    setInterval(() => this.tick(), 1000);\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            currentTime: new Date()\r\n        })\r\n    }\r\n\r\n    handleChange(event) {\r\n        if (event.target.value.length <= this.state.current.length) {\r\n            this.setState({\r\n                input: event.target.value\r\n            });\r\n            if (this.state.current === event.target.value) {\r\n                let diff = this.state.currentTime.getTime() - this.state.startedTime.getTime();\r\n                let minutes = diff/(1000 * 60);\r\n                let words = this.state.words + event.target.value.split(\" \").length;\r\n                this.setState({\r\n                    current: this.state.options[getRandomInt(0, this.state.options.length)],\r\n                    input: \"\",\r\n                    words: words,\r\n                    wordsPerMinute: Math.floor(words/minutes)\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"hero is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"columns is-vcentered\">\r\n                            <div className=\"column is-three-fifths is-offset-one-fifth is-centered\">\r\n                                <Sentence current={this.state.current} input={this.state.input}/>\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\">Type the sentence above:</label>\r\n                                    <div className=\"control\">\r\n                                        <input type=\"text\" className=\"input\" value={this.state.input} onChange={this.handleChange}/>\r\n                                    </div>\r\n                                </div>\r\n                                <WordsPerMinute wordsPerMinute={this.state.wordsPerMinute} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n"],"sourceRoot":""}