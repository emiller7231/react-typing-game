{"version":3,"sources":["index.js"],"names":["Letter","props","className","status","value","Sentence","letter","index","this","current","inputLetters","Array","from","input","map","isRigthOrWrong","letters","slice","length","React","Component","Game","state","isLoaded","options","error","handleChange","bind","fetch","then","res","text","result","optionsArray","split","setState","getRandomInt","event","target","type","onChange","min","max","Math","ceil","floor","random","ReactDOM","render","document","getElementById"],"mappings":"4OAIA,SAASA,EAAOC,GACZ,OACI,sBAAMC,UAAWD,EAAME,OAAvB,SAAgCF,EAAMG,Q,IAIxCC,E,6KACaC,EAAQC,GACnB,OAAOD,IAAWE,KAAKP,MAAMQ,QAAQF,GAAS,QAAU,U,+BAGlD,IAAD,OACCG,EAAeC,MAAMC,KAAKJ,KAAKP,MAAMY,OACtCC,KAAI,SAACR,EAAQC,GACV,OACI,cAACP,EAAD,CAAoBG,OAAQ,EAAKY,eAAeT,EAAQC,GAAQH,MAASE,GAA5DC,MAGnBS,EAAUL,MAAMC,KAAKJ,KAAKP,MAAMQ,SACjCQ,MAAMT,KAAKP,MAAMY,MAAMK,QACvBJ,KAAI,SAACR,EAAQC,GACV,OACI,cAACP,EAAD,CAAoBG,OAAO,UAAUC,MAASE,GAAjCC,MAIzB,OACI,sBAAKL,UAAU,QAAf,UACKQ,EACAM,S,GAvBMG,IAAMC,WA6BvBC,E,kDACF,WAAYpB,GAAQ,IAAD,8BACf,cAAMA,IACDqB,MAAQ,CACTC,UAAU,EACVC,QAAS,GACTC,MAAO,GACPhB,QAAS,GACTI,MAAO,IAGX,EAAKa,aAAe,EAAKA,aAAaC,KAAlB,gBAVL,E,gEAaE,IAAD,OAChBC,MAAM,oCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,IAAIC,EAAeD,EAAOE,MAAP,QACnB,EAAKC,SAAS,CACVZ,UAAU,EACVC,QAASS,EACTxB,QAASwB,EAAaG,EAAa,EAAGH,EAAaf,cAG3D,SAACO,GACG,EAAKU,SAAS,CACVZ,UAAU,EACVE,e,mCAMPY,GACLA,EAAMC,OAAOlC,MAAMc,QAAUV,KAAKc,MAAMb,QAAQS,SAChDV,KAAK2B,SAAS,CACVtB,MAAOwB,EAAMC,OAAOlC,QAEpBI,KAAKc,MAAMb,UAAY4B,EAAMC,OAAOlC,OACpCI,KAAK2B,SAAS,CACV1B,QAASD,KAAKc,MAAME,QAAQY,EAAa,EAAG5B,KAAKc,MAAME,QAAQN,SAC/DL,MAAO,Q,+BAOnB,OACI,qBAAKX,UAAU,YAAf,SACI,qBAAKA,UAAU,UAAf,SACI,sBAAKA,UAAU,yDAAf,UACI,cAACG,EAAD,CAAUI,QAASD,KAAKc,MAAMb,QAASI,MAAOL,KAAKc,MAAMT,QACzD,sBAAKX,UAAU,QAAf,UACI,uBAAOA,UAAU,QAAjB,sCACA,qBAAKA,UAAU,UAAf,SACI,uBAAOqC,KAAK,OAAOrC,UAAU,QAAQE,MAAOI,KAAKc,MAAMT,MAAO2B,SAAUhC,KAAKkB,+B,GA1D1FP,IAAMC,WAyEzB,SAASgB,EAAaK,EAAKC,GAGzB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,GAAOA,GARlDM,IAASC,OACL,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.34a77568.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Letter(props) {\r\n    return (\r\n        <span className={props.status}>{props.value}</span>\r\n    );\r\n}\r\n\r\nclass Sentence extends React.Component {\r\n    isRigthOrWrong(letter, index) {\r\n        return letter === this.props.current[index] ? \"right\" : \"wrong\";\r\n    }\r\n\r\n    render() {\r\n        const inputLetters = Array.from(this.props.input)\r\n            .map((letter, index) => {\r\n                return (\r\n                    <Letter key={index} status={this.isRigthOrWrong(letter, index)} value = {letter} />\r\n                );\r\n            });\r\n        const letters = Array.from(this.props.current)\r\n            .slice(this.props.input.length)\r\n            .map((letter, index) => {\r\n                return (\r\n                    <Letter key={index} status=\"nothing\" value = {letter} />\r\n                );\r\n            });\r\n\r\n        return (\r\n            <div className=\"title\">\r\n                {inputLetters}\r\n                {letters}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            options: [],\r\n            error: \"\",\r\n            current: \"\",\r\n            input: \"\"\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"/react-typing-game/sentences.txt\")\r\n            .then(res => res.text())\r\n            .then(\r\n                (result) => {\r\n                    let optionsArray = result.split(`\\r\\n`);\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        options: optionsArray,\r\n                        current: optionsArray[getRandomInt(0, optionsArray.length)]\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    handleChange(event) {\r\n        if (event.target.value.length <= this.state.current.length) {\r\n            this.setState({\r\n                input: event.target.value\r\n            });\r\n            if (this.state.current === event.target.value) {\r\n                this.setState({\r\n                    current: this.state.options[getRandomInt(0, this.state.options.length)],\r\n                    input: \"\"\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"columns\">\r\n                    <div className=\"column is-three-fifths is-offset-one-fifth is-centered\">\r\n                        <Sentence current={this.state.current} input={this.state.input}/>\r\n                        <div className=\"field\">\r\n                            <label className=\"label\">Type the sentence above:</label>\r\n                            <div className=\"control\">\r\n                                <input type=\"text\" className=\"input\" value={this.state.input} onChange={this.handleChange}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n"],"sourceRoot":""}